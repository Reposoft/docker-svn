#!/usr/bin/perl -w
use strict;

use SVN::Client;
my $ctx = new SVN::Client(
  auth => [SVN::Client::get_simple_provider(),
  SVN::Client::get_simple_prompt_provider(\&simple_prompt,2),
  SVN::Client::get_username_provider()]
);

use Getopt::Long;
my %o = ();
my $a;
my $b;

sub reponame {
  if ($b) {
    die("Maximum 2 repositories supported, had '$a' and '$b' but got '$_[0]'");
  } elsif ($a) {
    $b = $_[0];
  } else {
    $a = $_[0];
  }
}

GetOptions (\%o,
            '<>' => \&reponame
            )
or die("Error in command line arguments\n");

sub info {
  my $url = shift;
  my %relevant;

  my $receiver = sub {
    my( $path, $info, $pool ) = @_;

    $relevant{rev} = $info->rev();
    $relevant{uuid} = $info->repos_UUID();
    $relevant{date} = $info->last_changed_date();
    $relevant{revn} = $info->last_changed_rev();
  };
  $ctx->info($url, undef, 'HEAD', $receiver, 0 );
  return %relevant;
}

sub rev0 {
  my $url = $_[0];
  my %relevant;

  my ($rph, $rplrev) = $ctx->revprop_list($url, 0);

  $relevant{'url'} = $url;
  $relevant{'date'} = $rph->{'svn:date'};
  # busy
  $relevant{'sync-currently-copying'} = $rph->{'svn:sync-currently-copying'};
  $relevant{'sync-lock'} = $rph->{'svn:sync-lock'};
  # is sync dest
  $relevant{'sync-from-url'} = $rph->{'svn:sync-from-url'};
  $relevant{'sync-from-uuid'} = $rph->{'svn:sync-from-uuid'};
  $relevant{'sync-last-merged-rev'} = $rph->{'svn:sync-last-merged-rev'};
  # custom, detect need to break sync lock
  $relevant{'busy-detected-date'} = $rph->{'sync:busy-detected-date'};

  return %relevant;
}

sub isbusy {
  my %props = %{$_[0]};

  defined $props{'sync-lock'} or return 0;

  print "TODO set busy-detected-date to svn style iso string\n";
  return 1;
}

sub init {
  my ($from, $to) = $_;

}

sub sync {
  my %from = %{$_[0]};
  my %to = %{$_[1]};

  # If sync-* nonexistent on both we can clearly init.

  # Are existing revprops sane? url matching sync-url?

  print "Sync $from{url} => $to{url}\n";
  my @args = ("svnsync", "sync", $to{url});
  system(@args) == 0 or die("Sync failed!");
  print "---- sync done ----\n";
}

sub pair {
  my ($urla, $urlb) = @_;

  print "Got pair $urla $urlb\n";

  my %an = info($urla);
  my %ap = rev0($urla);
  my %bn = info($urlb);
  my %bp = rev0($urlb);

  use Data::Dumper;
  print "A:", Dumper(\%an, \%ap);
  print "B:", Dumper(\%bn, \%bp);

  print "UUID differs $an{uuid} to $bn{uuid} so sync disallowed\n" and return unless $an{uuid} eq $bn{uuid};
  print "First repo is busy\n" and return if isbusy \%ap;
  print "Second repo is busy\n" and return if isbusy \%bp;

  if ($an{rev} > $bn{rev}) {
    # TODO any additional check on info, before we drop that and sync based on "relevant"
    sync(\%ap, \%bp);
  } elsif ($an{rev} < $bn{rev}) {
    # TODO any additional check on info, before we drop that and sync based on "relevant"
    sync(\%bp, \%ap);
  } else {
    print "Repositories are equal\n";
    return;
  }
}

sub parentPair {
  my ($purla, $purlb) = @_;

  # Read Collection of Repositories XML from both and attempt to sync those that match in name, log warning for missing on either
  #use WWW::Curl;

  return 0;
}

sub forever {
  # maybe repeating this procedure is the responsibility of docker scheduling or replication controllers?
}

if ($a and $b) {
  pair($a, $b);
} else {
  print "No args given. Reposync might use ENV and naming conventions";
  use Data::Dumper;
  print Dumper(\%ENV);
}
